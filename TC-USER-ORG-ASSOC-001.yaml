---
- name: TC-USER-ORG-ASSOC-001 - Associate a user to organization via org-scoped role
  hosts: localhost
  gather_facts: false
  vars_files:
    - ./vars/aap.yml
    - ./vars/user.yml
    
  vars:
    org_name: "ENG-ORG-{{ rh_username }}"
    org_role: "Organization Auditor"     # or Organization Admin / Organization Viewer
    org_description: "Engineering org for {{ rh_username }}"
    plat_username: "USER-02-{{ rh_username }}"
    plat_password: "Str0ngP@ss!23"
    plat_email: "USER-02-{{ rh_username }}@example.com"
    plat_first: "USER-02"
    plat_last: "{{ rh_username }}"
    plat_is_superuser: false

  tasks:
    # Pre-req checks per spec
    - name: Create platform organization
      ansible.platform.organization: &org_create
        name: "{{ org_name }}"
        description: "{{ org_description }}"
        state: present
        aap_hostname: "{{ aap_hostname }}"
        aap_username: "{{ aap_username }}"
        aap_password: "{{ aap_password }}"
        aap_validate_certs: "{{ aap_validate_certs }}"
      register: created

    - name: Create platform user
      ansible.platform.user: &plat_user
        username: "{{ plat_username }}"
        password: "{{ plat_password }}"
        email: "{{ plat_email }}"
        first_name: "{{ plat_first }}"
        last_name: "{{ plat_last }}"
        is_superuser: "{{ plat_is_superuser }}"
        state: present
        aap_hostname: "{{ aap_hostname }}"
        aap_username: "{{ aap_username }}"
        aap_password: "{{ aap_password }}"
        aap_validate_certs: "{{ aap_validate_certs }}"
      register: create_result

    # ---- Verify via Gateway (source of truth)
    - name: Verify org via Gateway API
      ansible.builtin.uri:
        url: "{{ aap_hostname }}/api/gateway/v1/organizations/?name={{ org_name | urlencode }}"
        method: GET
        user: "{{ aap_username }}"
        password: "{{ aap_password }}"
        force_basic_auth: true
        validate_certs: false
        return_content: true
      register: gw_orgs

    - name: Pick exact org from Gateway results
      ansible.builtin.set_fact:
        gw_org: "{{ (gw_orgs.json.results | selectattr('name','equalto', org_name) | list | first) }}"
    - name: Assert Gateway fields
      ansible.builtin.assert:
        that:
          - gw_org is defined
          - gw_org.name == org_name
          - (gw_org.description | default('')) == org_description
        fail_msg: "Gateway org fields do not match."

    # Assign org-scoped role to associate user with org
    - name: Associate user to org via role assignment
      ansible.platform.role_user_assignment:
        aap_hostname: "{{ aap_hostname }}"
        aap_username: "{{ aap_username }}"
        aap_password: "{{ aap_password }}"
        aap_validate_certs: "{{ aap_validate_certs }}"
        role_definition: "{{ org_role }}"
        user: "{{ plat_username }}"
        object_ids:
          - "{{ org_name }}"
        state: present
      register: org_assoc

    - name: Assert first run changed
      ansible.builtin.assert:
        that: org_assoc is changed

    # Idempotency
    - name: Re-run association (idempotent)
      ansible.platform.role_user_assignment:
        aap_hostname: "{{ aap_hostname }}"
        aap_username: "{{ aap_username }}"
        aap_password: "{{ aap_password }}"
        aap_validate_certs: "{{ aap_validate_certs }}"
        role_definition: "{{ org_role }}"
        user: "{{ plat_username }}"
        object_ids:
          - "{{ org_name }}"
        state: present
      register: org_assoc_again

    - name: Assert second run not changed
      ansible.builtin.assert:
        that: org_assoc_again is not changed

